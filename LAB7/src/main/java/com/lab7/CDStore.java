package com.lab7;

import java.io.*;
import static java.lang.Character.isDigit;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author maianhtran
 */
public class CDStore extends javax.swing.JFrame implements Serializable {

    /**
     * Creates new form CDStore
     */
    //ArrayList<CD> CDs = new ArrayList<>();
    CDManager cdManager;

    public CDStore(CDManager cdManager) {
        initComponents();
        setLocationRelativeTo(null);

        this.setVisible(true);
        this.cdManager = cdManager;
        loadCDs("CDs.Dat");
        fillInCDTable();
        //this.setVisible(true);
        manageTable.putClientProperty("JTable.autoStartsEdit", Boolean.FALSE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        newCDButton = new javax.swing.JButton();
        backupButton = new javax.swing.JButton();
        restoreButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        manageTable = new javax.swing.JTable();
        deleteButton = new javax.swing.JButton();
        searchComboBox = new javax.swing.JComboBox<>();
        searchField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CD Store");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        newCDButton.setText("New CD");
        newCDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCDButtonActionPerformed(evt);
            }
        });

        backupButton.setText("Backup");
        backupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupButtonActionPerformed(evt);
            }
        });

        restoreButton.setText("Restore");
        restoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        manageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title", "Collection", "Type", "Price"
            }
        ));
        jScrollPane1.setViewportView(manageTable);

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        searchComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Title", "Collection", "Type", "Price" }));

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(newCDButton)
                .addGap(72, 72, 72)
                .addComponent(backupButton)
                .addGap(79, 79, 79)
                .addComponent(restoreButton)
                .addGap(60, 60, 60)
                .addComponent(refreshButton)
                .addGap(75, 75, 75)
                .addComponent(deleteButton))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 661, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(searchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(searchButton))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newCDButton)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(restoreButton)
                        .addComponent(backupButton))
                    .addComponent(refreshButton)
                    .addComponent(deleteButton))
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton)))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 23;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(34, 6, 23, 86);
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newCDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCDButtonActionPerformed
        new NewCD(this, true, cdManager).setVisible(true);
        this.setVisible(false);
        //loadCDs();
        //fillInCDTable();
    }//GEN-LAST:event_newCDButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) manageTable.getModel();
        int deleteIndex = manageTable.getSelectedRow();
        if (deleteIndex != -1) {
            int choice = JOptionPane.showConfirmDialog(null, "Do you want to delete this CD?",
                    "Confirmation", JOptionPane.YES_NO_OPTION);
            if (choice == JOptionPane.YES_OPTION) {
                cdManager.getListCD().remove(deleteIndex);
            }
            saveCDs("CDs.Dat");
            fillInCDTable();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed

        fillInCDTable();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void backupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int select = fileChooser.showSaveDialog(this);

        if (select == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            String fileName = file.getAbsolutePath();
            saveCDs("CDs.Dat");
            JOptionPane.showMessageDialog(this, "Backup successful.");
            System.out.print("Save as file: " + file.getAbsolutePath());
        }

    }//GEN-LAST:event_backupButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        DefaultTableModel model = (DefaultTableModel) manageTable.getModel();

        String searchText = searchField.getText().trim();

        ArrayList<CD> searchByTitle = searchByTitle(searchText);
        ArrayList<CD> searchByCollection = searchByCollection(searchText);
        ArrayList<CD> searchByType = searchByType(searchText);
        ArrayList<CD> searchByPrice = searchByPrice(searchText);

        model.setRowCount(0);

        if (searchComboBox.getSelectedIndex() == 0) {
            for (CD cd : searchByTitle) {
                Object[] rows = {cd.getTitle(), cd.getCollection(), cd.getType(), cd.getPrice()};
                model.addRow(rows);
            }
        } else if (searchComboBox.getSelectedIndex() == 1) {
            for (CD cd : searchByCollection) {
                Object[] rows = {cd.getTitle(), cd.getCollection(), cd.getType(), cd.getPrice()};
                model.addRow(rows);
            }
        } else if (searchComboBox.getSelectedIndex() == 2) {
            for (CD cd : searchByType) {
                Object[] rows = {cd.getTitle(), cd.getCollection(), cd.getType(), cd.getPrice()};
                model.addRow(rows);
            }
        } else if (searchComboBox.getSelectedIndex() == 3) {
            for (CD cd : searchByPrice) {
                Object[] rows = {cd.getTitle(), cd.getCollection(), cd.getType(), cd.getPrice()};
                model.addRow(rows);
            }
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void restoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreButtonActionPerformed
        /*JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            System.out.print("Selected file: " + selectedFile.getAbsolutePath());
        }*/

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Choose a file to restore from");

        int userSelection = fileChooser.showOpenDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToLoad = fileChooser.getSelectedFile();

            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(fileToLoad))) {
                ArrayList<CD> restoredList = (ArrayList<CD>) ois.readObject();
                cdManager.setListCD(restoredList);
                fillInCDTable();
                JOptionPane.showMessageDialog(this, "Restore successful!");
            } catch (IOException | ClassNotFoundException e) {
                JOptionPane.showMessageDialog(this, "Error during restore: " + e.getMessage());
            }
        }

    }//GEN-LAST:event_restoreButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    /*private void saveCDs() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("CDs.Dat"))) {
            oos.writeObject(cdManager.getListCD());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving CDs to file.");
        }
    }*/
    private ArrayList<CD> searchByTitle(String searchText) {
        ArrayList<CD> result = new ArrayList<>();
        for (CD cd : cdManager.getListCD()) {
            if (cd.getTitle().toLowerCase().contains(searchText.toLowerCase())) {
                result.add(cd);
            }
        }
        return result;
    }

    private ArrayList<CD> searchByCollection(String searchText) {
        ArrayList<CD> result = new ArrayList<>();
        for (CD cd : cdManager.getListCD()) {
            if (cd.getCollection().toLowerCase().contains(searchText.toLowerCase())) {
                result.add(cd);
            }
        }
        return result;
    }

    private ArrayList<CD> searchByType(String searchText) {
        ArrayList<CD> result = new ArrayList<>();
        for (CD cd : cdManager.getListCD()) {
            if (cd.getType().toLowerCase().contentEquals(searchText.toLowerCase())) {
                result.add(cd);
            }
        }
        return result;
    }

    private ArrayList<CD> searchByPrice(String searchText) {
        ArrayList<CD> result = new ArrayList<>();
        for (CD cd : cdManager.getListCD()) {
            String price = Double.toString(cd.getPrice());
            if (price.contains(searchText)) {
                result.add(cd);
            }
        }
        return result;
    }

    private void loadCDs(String fileName) {
        ArrayList<CD> temp = new ArrayList<>();
        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(fileName));
            String line = "";
            while ((line = br.readLine()) != null) {
                String id = line;
                String title = br.readLine();
                String collection = br.readLine();
                String type = br.readLine();
                double price = Double.parseDouble(br.readLine());
                int year = Integer.parseInt(br.readLine());
                CD cd = new CD(id, title, collection, type, price, year);
                temp.add(cd);
            }
            cdManager.setListCD(temp);

        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
        }
    }

    public void saveCDs(String fileName) {
        //CD(String id, String title, String collection, String type, double price, int year) 
        PrintWriter pw = null;
        try {
            pw = new PrintWriter(new FileWriter(fileName));
            for (CD cd : cdManager.getListCD()) {
                pw.println(cd.getId());
                pw.println(cd.getTitle());
                pw.println(cd.getCollection());
                pw.println(cd.getType());
                pw.println(String.format("%.2f", cd.getPrice()));
                pw.println(String.format("%d", cd.getYear()));

            }
            pw.flush();
        } catch (IOException ex) {
        } finally {
            pw.close();
        }
    }

//    private void loadCDs() {
//        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("CDs.Dat"))) {
//            cdManager.setListCD((ArrayList<CD>) ois.readObject());
//        } catch (IOException | ClassNotFoundException e) {
//            JOptionPane.showMessageDialog(this, "Error loading CDs from file.");
//        }
//    }
    private void fillInCDTable() {
        //Delete all row
        this.setVisible(false);
        DefaultTableModel model = (DefaultTableModel) manageTable.getModel();

        //Add row
        model.setRowCount(0);
        Vector rowS;
        //CD(String id, String title, String collection, String type, double price, int year) 
        for (CD cd : cdManager.getListCD()) {
            rowS = new Vector<>();

            rowS.add(cd.getTitle());
            rowS.add(cd.getCollection());
            rowS.add(cd.getType());
            rowS.add(cd.getPrice());

            model.addRow(rowS);
        }
        this.setVisible(true);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backupButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable manageTable;
    private javax.swing.JButton newCDButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton restoreButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox<String> searchComboBox;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
}
