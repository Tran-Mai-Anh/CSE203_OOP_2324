package com.lab7;

import java.io.*;
import static java.lang.Character.isDigit;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author maianhtran
 */
public class CDStore extends javax.swing.JFrame implements Serializable {

    /**
     * Creates new form CDStore
     */
    //ArrayList<CD> CDs = new ArrayList<>();
    CDManager cdManager;

    public CDStore(CDManager cdManager) {
        initComponents();
        setLocationRelativeTo(null);

        this.setVisible(true);
        this.cdManager = cdManager;
        loadCDs("CDs.DAT");
        fillInCDTable();
        //this.setVisible(true);
        manageTable.putClientProperty("JTable.autoStartsEdit", Boolean.FALSE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newCDButton = new javax.swing.JButton();
        backupButton = new javax.swing.JButton();
        restoreButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        manageTable = new javax.swing.JTable();
        searchButton = new javax.swing.JButton();
        searchComboBox = new javax.swing.JComboBox<>();
        searchField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CD Store");

        newCDButton.setText("New CD");
        newCDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCDButtonActionPerformed(evt);
            }
        });

        backupButton.setText("Backup");
        backupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupButtonActionPerformed(evt);
            }
        });

        restoreButton.setText("Restore");
        restoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        manageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title", "Collection", "Type", "Price"
            }
        ));
        jScrollPane1.setViewportView(manageTable);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        searchComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Title", "Collection", "Type", "Price" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(81, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(newCDButton)
                        .addGap(46, 46, 46)
                        .addComponent(backupButton)
                        .addGap(53, 53, 53)
                        .addComponent(restoreButton)
                        .addGap(52, 52, 52)
                        .addComponent(refreshButton)
                        .addGap(68, 68, 68)
                        .addComponent(deleteButton)
                        .addGap(44, 44, 44))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(160, 160, 160)
                .addComponent(searchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86)
                .addComponent(searchField)
                .addGap(18, 18, 18)
                .addComponent(searchButton)
                .addGap(103, 103, 103))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newCDButton)
                    .addComponent(deleteButton)
                    .addComponent(refreshButton)
                    .addComponent(restoreButton)
                    .addComponent(backupButton))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchButton)
                    .addComponent(searchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newCDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCDButtonActionPerformed
        new NewCD(this, true, cdManager).setVisible(true);
        this.setVisible(false);
        //loadCDs();
        //fillInCDTable();
    }//GEN-LAST:event_newCDButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) manageTable.getModel();
        int deleteIndex = manageTable.getSelectedRow();
        if (deleteIndex != -1) {
            int choice = JOptionPane.showConfirmDialog(null, "Do you want to delete this CD?",
                    "Confirmation", JOptionPane.YES_NO_OPTION);
            if (choice == JOptionPane.YES_OPTION) {
                cdManager.getListCD().remove(deleteIndex);
            }
            saveCDs("CDs.DAT");
            fillInCDTable();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed

        fillInCDTable();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void backupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int select = fileChooser.showSaveDialog(this);
        if (select == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            System.out.print("Save as file: " + file.getAbsolutePath());
        }
        /*JFileChooser fileChooser = new JFileChooser();
    int result = fileChooser.showSaveDialog(this);
    if (result == JFileChooser.APPROVE_OPTION) {
        File file = fileChooser.getSelectedFile();
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(file));
            for (int i = 0; i < manageTable.getRowCount(); i++) {
                for (int j = 0; j < manageTable.getColumnCount(); j++) {
                    writer.write((String) manageTable.getValueAt(i, j));
                    if (j < manageTable.getColumnCount() - 1) {
                        writer.write(",");
                    }
                }
                writer.newLine();
            }
            writer.close();
            JOptionPane.showMessageDialog(this, "Backup successful");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error during backup: " + e.getMessage());
        }
    }*/

    }//GEN-LAST:event_backupButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        /*String select = (String) searchComboBox.getSelectedItem();
        String searchText = searchField.getText();
        
        if(!searchText.isEmpty()){
            for(int row=0; row<manageTable.getRowCount();row++){
                Object value=manageTable.getValueAt(row, searchComboBox.getSelectedIndex());
                if(value.toString().equalsIgnoreCase(searchText)){
                    manageTable.getSelectionModel().setSelectionInterval(row, row);
                    break;
                }
            }
        }
        else if(searchText !=null){
            JOptionPane.showMessageDialog(this, "Can not find .");
        }
        else{
            JOptionPane.showMessageDialog(this, "Search text can not be empty.");
        }*/
        /*String title, collection, type, price;
        String searchText = this.searchField.getText();

        if (this.searchComboBox.getSelectedItem() == "Title") {
            title = this.searchField.getText();
            ArrayList<CD> listSearchTitle = this.cdManager.getListCDByTitle(title);
            fillInCDTable();
        }

        if (this.searchComboBox.getSelectedItem() == "Collection") {
            collection = this.searchField.getText();
            ArrayList<CD> listSearchCollection = this.cdManager.getListCDByCollection(collection);
            fillInCDTable();
        }

        if (this.searchComboBox.getSelectedItem() == "Type") {
            type = this.searchField.getText();
            ArrayList<CD> listSearchType = this.cdManager.getListCDByType(type);
            fillInCDTable();
        }

        try {
            if (this.searchComboBox.getSelectedItem().equals("Price")) {
                double price1 = Double.parseDouble(this.searchField.getText());
                ArrayList<CD> listSearchPrice = this.cdManager.getListCDByPrice(price1);
                fillInCDTable();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Price does not exist.");
        }*/


    }//GEN-LAST:event_searchButtonActionPerformed

    private void restoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            System.out.print("Selected file: " + selectedFile.getAbsolutePath());
        }

    }//GEN-LAST:event_restoreButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    /*private void saveCDs() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("CDs.Dat"))) {
            oos.writeObject(cdManager.getListCD());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving CDs to file.");
        }
    }*/
    private void loadCDs(String fileName) {
        ArrayList<CD> temp = new ArrayList<>();
        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(fileName));
            String line = "";
            while ((line = br.readLine()) != null) {
                String id = line;
                String title = br.readLine();
                String collection = br.readLine();
                String type = br.readLine();
                double price = Double.parseDouble(br.readLine());
                int year = Integer.parseInt(br.readLine());
                CD cd = new CD(id, title, collection, type, price, year);
                temp.add(cd);
            }
            cdManager.setListCD(temp);

        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
        }
    }

    public void saveCDs(String fileName) {
        //CD(String id, String title, String collection, String type, double price, int year) 
        PrintWriter pw = null;
        try {
            pw = new PrintWriter(new FileWriter(fileName));
            for (CD cd : cdManager.getListCD()) {
                pw.println(cd.getId());
                pw.println(cd.getTitle());
                pw.println(cd.getCollection());
                pw.println(cd.getType());
                pw.println(String.format("%.2f", cd.getPrice()));
                pw.println(String.format("%d", cd.getYear()));

            }
            pw.flush();
        } catch (IOException ex) {
        } finally {
            pw.close();
        }
    }

//    private void loadCDs() {
//        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("CDs.Dat"))) {
//            cdManager.setListCD((ArrayList<CD>) ois.readObject());
//        } catch (IOException | ClassNotFoundException e) {
//            JOptionPane.showMessageDialog(this, "Error loading CDs from file.");
//        }
//    }
    private void fillInCDTable() {
        //Delete all row
        this.setVisible(false);
        DefaultTableModel model = (DefaultTableModel) manageTable.getModel();

        //Add row
        model.setRowCount(0);
        Vector rowS;
        //CD(String id, String title, String collection, String type, double price, int year) 
        for (CD cd : cdManager.getListCD()) {
            rowS = new Vector<>();

            rowS.add(cd.getTitle());
            rowS.add(cd.getCollection());
            rowS.add(cd.getType());
            rowS.add(cd.getPrice());

            model.addRow(rowS);
        }
        this.setVisible(true);

    }

    private void fillListCD(ArrayList<CD> sort) {
        DefaultTableModel model = (DefaultTableModel) manageTable.getModel();
        int rowCount = model.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }

        for (CD cd : cdManager.getListCD()) {
            Object[] rows = new Object[]{cd.getTitle(), cd.getCollection(), cd.getType(), cd.getPrice()};
            model.addRow(rows);
        }
        pack();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backupButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable manageTable;
    private javax.swing.JButton newCDButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton restoreButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox<String> searchComboBox;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
}
